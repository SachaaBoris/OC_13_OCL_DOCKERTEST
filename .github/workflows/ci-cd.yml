name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8

    - name: Lint with flake8
      run: flake8 .

    - name: Run tests with coverage
      run: pytest --cov=. --cov-report=xml

    - name: Check test coverage
      run: |
        coverage_percentage=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(float(root.attrib['line-rate']) * 100)")
        echo "Test coverage: $coverage_percentage%"
        if (( $(echo "$coverage_percentage < 80" | bc -l) )); then
          echo "Test coverage is below 80%"
          exit 1
        fi

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
    - uses: actions/checkout@v3

    - name: Set commit hash
      id: vars
      run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Create .env file with secrets
      run: |
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > .env
        echo "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" >> .env
        echo "DEBUG=False" >> .env

    - name: Build and push with commit hash
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/oc-lettings:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/oc-lettings:${{ steps.vars.outputs.sha_short }}

#    - name: Create local testing script
#      run: |
#        echo '#!/bin/bash' > run_docker_local.sh
#        echo 'docker pull ${{ secrets.DOCKERHUB_USERNAME }}/oc-lettings:${{ steps.vars.outputs.sha_short }}' >> run_docker_local.sh
#        echo 'docker run -p 8000:8000 --env-file .env ${{ secrets.DOCKERHUB_USERNAME }}/oc-lettings:${{ steps.vars.outputs.sha_short }}' >> run_docker_local.sh
#        chmod +x run_docker_local.sh
#
#    - name: Upload local testing script
#      uses: actions/upload-artifact@v3
#      with:
#        name: run_docker_local
#        path: run_docker_local.sh

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set commit hash
      id: vars
      run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
    
    - name: Deploy to Render
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      run: |
        curl -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
        -H "Authorization: Bearer $RENDER_API_KEY" \
        -H "Content-Type: application/json" \
        -d '{
          "clearCache": "clear",
          "imageTag": "${{ steps.vars.outputs.sha_short }}"
        }'
